{"ast":null,"code":"import { getCountdownTimerStart } from \"./actionsCreator\";\nexport const getCountdownTime = () => dispatch => {\n  const deadlineDate = new Date('September 31, 2019 23:59:59').getTime();\n  let distance;\n  setInterval(() => {\n    const currentDate = new Date().getTime();\n    return distance = deadlineDate - currentDate;\n  }, 1000);\n  const time = {\n    days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n    hours: Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n    minutes: Math.floor(distance % (1000 * 60 * 60) / (1000 * 60)),\n    seconds: Math.floor(distance % (1000 * 60) / 1000)\n  };\n  dispatch(getCountdownTimerStart(time));\n};","map":{"version":3,"sources":["/Users/aaronchu/Development/projects/mod-5-final/international-food-index-backend/client/src/actions/countdownTimerActions.js"],"names":["getCountdownTimerStart","getCountdownTime","dispatch","deadlineDate","Date","getTime","distance","setInterval","currentDate","time","days","Math","floor","hours","minutes","seconds"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,kBAAvC;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAMC,QAAQ,IAAI;AAChD,QAAMC,YAAY,GAAG,IAAIC,IAAJ,CAAS,6BAAT,EAAwCC,OAAxC,EAArB;AACA,MAAIC,QAAJ;AAEAC,EAAAA,WAAW,CAAC,MAAM;AAChB,UAAMC,WAAW,GAAG,IAAIJ,IAAJ,GAAWC,OAAX,EAApB;AACA,WAAOC,QAAQ,GAAGH,YAAY,GAAGK,WAAjC;AACD,GAHU,EAGR,IAHQ,CAAX;AAKA,QAAMC,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAGC,IAAI,CAACC,KAAL,CAAWN,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CADI;AAEXO,IAAAA,KAAK,EAAGF,IAAI,CAACC,KAAL,CAAYN,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CAAX,CAFG;AAGXQ,IAAAA,OAAO,EAAGH,IAAI,CAACC,KAAL,CAAYN,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAHC;AAIXS,IAAAA,OAAO,EAAGJ,IAAI,CAACC,KAAL,CAAYN,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC;AAJC,GAAb;AAMAJ,EAAAA,QAAQ,CAACF,sBAAsB,CAACS,IAAD,CAAvB,CAAR;AACD,CAhBM","sourcesContent":["import { getCountdownTimerStart } from \"./actionsCreator\";\n\nexport const getCountdownTime = () => dispatch => {\n  const deadlineDate = new Date('September 31, 2019 23:59:59').getTime()\n  let distance;\n  \n  setInterval(() => {\n    const currentDate = new Date().getTime();\n    return distance = deadlineDate - currentDate;\n  }, 1000)\n\n  const time = {\n    days: (Math.floor(distance / (1000 * 60 * 60 * 24))),\n    hours: (Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))),\n    minutes: (Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))),\n    seconds: (Math.floor((distance % (1000 * 60)) / 1000)) \n  }\n  dispatch(getCountdownTimerStart(time))\n}"]},"metadata":{},"sourceType":"module"}
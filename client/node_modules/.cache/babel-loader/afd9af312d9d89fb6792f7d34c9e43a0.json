{"ast":null,"code":"var _jsxFileName = \"/Users/aaronchu/Development/projects/mod-5-final/international-food-index-backend/client/src/containers/MarkersContainer.js\";\nimport React, { Component } from 'react';\nimport MapMarker from '../components/MapMarker';\nimport MapInfoWindow from '../components/MapInfoWindow'; // function importAll(r) {\n//   return r.keys().map(r);\n// }\n// const images = importAll(require.context('./svg', false, /\\.(png|jpe?g|svg)$/));\n\nclass MarkersContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      locationCoordinates: [],\n      locationInfo: null,\n      locationDishes: []\n    };\n\n    this.handleMarkerOnClick = locationInfo => {\n      fetch(\"/locations/\".concat(locationInfo.id)).then(resp => resp.json()).then(locationData => {\n        let dishes = [];\n        locationData.data.attributes.national_dishes.map(dish => dishes.push(dish));\n        this.setState({\n          locationInfo: locationInfo,\n          locationDishes: dishes\n        });\n      });\n    };\n\n    this.handleInfoWindowCloseClick = () => {\n      this.setState({\n        locationInfo: null\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch('/locations').then(resp => resp.json()).then(locations => {\n      locations.data.map(location => {\n        return this.setState({\n          locationCoordinates: [...this.state.locationCoordinates, location]\n        });\n      });\n    });\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.locationCoordinates !== prevState.locationCoordinates) {\n      this.props.addLocationCoordinates(this.state.locationCoordinates);\n    }\n  }\n\n  // getMarkerIcon = () => {\n  //   let imageFileFinal = undefined\n  //   debugger\n  //   images.map(image => {\n  //     let imageFileInitial = image\n  //     let imageFileCountryName = image.split('.')[0].split('/').pop()\n  //     if (imageFileCountryName === this.state.locationCoordinates.attributes.name.toLowerCase().join(\"-\")) {\n  //       debugger\n  //       imageFileFinal = imageFileInitial\n  //     }\n  //   })\n  //   return imageFileFinal\n  // }\n  render() {\n    const generateMarkers = this.state.locationCoordinates.map(location => React.createElement(MapMarker, {\n      location: location,\n      handleMarkerOnClick: this.handleMarkerOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n    const generateInfoWindow = React.createElement(MapInfoWindow, {\n      locationDishes: this.state.locationDishes,\n      locationInfo: this.state.locationInfo,\n      handleInfoWindowCloseClick: this.handleInfoWindowCloseClick,\n      userInfo: this.props.userInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: \"markers-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, generateMarkers, this.state.locationInfo ? generateInfoWindow : null);\n  }\n\n}\n\nexport default MarkersContainer;","map":{"version":3,"sources":["/Users/aaronchu/Development/projects/mod-5-final/international-food-index-backend/client/src/containers/MarkersContainer.js"],"names":["React","Component","MapMarker","MapInfoWindow","MarkersContainer","state","locationCoordinates","locationInfo","locationDishes","handleMarkerOnClick","fetch","id","then","resp","json","locationData","dishes","data","attributes","national_dishes","map","dish","push","setState","handleInfoWindowCloseClick","componentDidMount","locations","location","componentDidUpdate","prevState","props","addLocationCoordinates","render","generateMarkers","generateInfoWindow","userInfo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport MapMarker from '../components/MapMarker'\nimport MapInfoWindow from '../components/MapInfoWindow';\n\n// function importAll(r) {\n//   return r.keys().map(r);\n// }\n\n// const images = importAll(require.context('./svg', false, /\\.(png|jpe?g|svg)$/));\n\nclass MarkersContainer extends Component {\n\n  state = {\n    locationCoordinates: [],\n    locationInfo: null,\n    locationDishes: []\n  }\n\n  componentDidMount() {\n    fetch('/locations')\n      .then(resp => resp.json())\n      .then(locations => {\n        locations.data.map(location => {\n          return this.setState({ locationCoordinates: [...this.state.locationCoordinates, location] })\n        })\n      })\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.locationCoordinates !== prevState.locationCoordinates) {\n      this.props.addLocationCoordinates(this.state.locationCoordinates)\n    }\n  }\n\n  handleMarkerOnClick = (locationInfo) => {\n    fetch(`/locations/${locationInfo.id}`)\n      .then(resp => resp.json())\n      .then(locationData => {\n        let dishes = []\n        locationData.data.attributes.national_dishes.map(dish => dishes.push(dish))\n        this.setState({\n          locationInfo: locationInfo,\n          locationDishes: dishes\n        })\n      })\n  }\n\n  handleInfoWindowCloseClick = () => {\n    this.setState({\n      locationInfo: null\n    })\n  }\n\n  // getMarkerIcon = () => {\n  //   let imageFileFinal = undefined\n  //   debugger\n  //   images.map(image => {\n  //     let imageFileInitial = image\n  //     let imageFileCountryName = image.split('.')[0].split('/').pop()\n  //     if (imageFileCountryName === this.state.locationCoordinates.attributes.name.toLowerCase().join(\"-\")) {\n  //       debugger\n  //       imageFileFinal = imageFileInitial\n  //     }\n  //   })\n  //   return imageFileFinal\n  // }\n\n  render() {\n    const generateMarkers = this.state.locationCoordinates.map(location => <MapMarker location={location} handleMarkerOnClick={this.handleMarkerOnClick} />)\n    const generateInfoWindow = <MapInfoWindow locationDishes={this.state.locationDishes} locationInfo={this.state.locationInfo} handleInfoWindowCloseClick={this.handleInfoWindowCloseClick} userInfo={this.props.userInfo} />\n    return (\n      <div className='markers-container' >\n        {generateMarkers}\n        {this.state.locationInfo ? generateInfoWindow : null}\n      </div>\n    )\n  }\n}\n\nexport default MarkersContainer"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var t = function () {\n  function t(e, i) {\n    e.getClusterer().extend(t, google.maps.OverlayView), this.cluster = e, this.className = this.cluster.getClusterer().getClusterClass(), this.styles = i, this.center = void 0, this.div = null, this.sums = null, this.visible = !1, this.boundsChangedListener = null, this.url = \"\", this.height = 0, this.width = 0, this.anchorText = [0, 0], this.anchorIcon = [0, 0], this.textColor = \"black\", this.textSize = 11, this.textDecoration = \"none\", this.fontWeight = \"bold\", this.fontStyle = \"normal\", this.fontFamily = \"Arial,sans-serif\", this.backgroundPosition = \"0 0\", this.setMap(e.getMap());\n  }\n\n  var e = t.prototype;\n  return e.onAdd = function () {\n    var t,\n        e,\n        i = this;\n    this.div = document.createElement(\"div\"), this.div.className = this.className, this.visible && this.show(), this.getPanes().overlayMouseTarget.appendChild(this.div), this.boundsChangedListener = google.maps.event.addListener(this.getMap(), \"boundschanged\", function () {\n      e = t;\n    }), google.maps.event.addDomListener(this.div, \"mousedown\", function () {\n      t = !0, e = !1;\n    }), google.maps.event.addDomListener(this.div, \"click\", function (s) {\n      if (t = !1, !e) {\n        var n = i.cluster.getClusterer();\n\n        if (google.maps.event.trigger(n, \"click\", i.cluster), google.maps.event.trigger(n, \"clusterclick\", i.cluster), n.getZoomOnClick()) {\n          var r = n.getMaxZoom(),\n              o = i.cluster.getBounds();\n          n.getMap().fitBounds(o), setTimeout(function () {\n            n.getMap().fitBounds(o), null !== r && n.getMap().getZoom() > r && n.getMap().setZoom(r + 1);\n          }, 100);\n        }\n\n        s.cancelBubble = !0, s.stopPropagation && s.stopPropagation();\n      }\n    }), google.maps.event.addDomListener(this.div, \"mouseover\", function () {\n      google.maps.event.trigger(i.cluster.getClusterer(), \"mouseover\", i.cluster);\n    }), google.maps.event.addDomListener(this.div, \"mouseout\", function () {\n      google.maps.event.trigger(i.cluster.getClusterer(), \"mouseout\", i.cluster);\n    });\n  }, e.onRemove = function () {\n    this.div && this.div.parentNode && (this.hide(), null !== this.boundsChangedListener && google.maps.event.removeListener(this.boundsChangedListener), google.maps.event.clearInstanceListeners(this.div), this.div.parentNode.removeChild(this.div), this.div = null);\n  }, e.draw = function () {\n    if (this.visible && null !== this.div && this.center) {\n      var t = this.getPosFromLatLng(this.center),\n          e = t.x;\n      this.div.style.top = t.y + \"px\", this.div.style.left = e + \"px\";\n    }\n  }, e.hide = function () {\n    this.div && (this.div.style.display = \"none\"), this.visible = !1;\n  }, e.show = function () {\n    if (this.div && this.center) {\n      var t = \"\",\n          e = this.backgroundPosition.split(\" \"),\n          i = parseInt(e[0].replace(/^\\s+|\\s+$/g, \"\"), 10),\n          s = parseInt(e[1].replace(/^\\s+|\\s+$/g, \"\"), 10),\n          n = this.getPosFromLatLng(this.center);\n      this.div.style.cssText = this.createCss(n), t = \"<img src='\" + this.url + \"' style='position: absolute; top: \" + s + \"px; left: \" + i + \"px; \", this.cluster.getClusterer().enableRetinaIcons || (t += \"clip: rect(\" + -1 * s + \"px, \" + (-1 * i + this.width) + \"px, \" + (-1 * s + this.height) + \"px, \" + -1 * i + \"px);\"), this.div.innerHTML = (t += \"'>\") + \"<div style='position: absolute;top: \" + this.anchorText[0] + \"px;left: \" + this.anchorText[1] + \"px;color: \" + this.textColor + \";font-size: \" + this.textSize + \"px;font-family: \" + this.fontFamily + \";font-weight: \" + this.fontWeight + \";font-style: \" + this.fontStyle + \";text-decoration: \" + this.textDecoration + \";text-align: center;width: \" + this.width + \"px;line-height:\" + this.height + \"px;'>\" + this.sums.text + \"</div>\", this.div.title = void 0 === this.sums.title || \"\" === this.sums.title ? this.cluster.getClusterer().getTitle() : this.sums.title, this.div.style.display = \"\";\n    }\n\n    this.visible = !0;\n  }, e.useStyle = function (t) {\n    this.sums = t;\n    var e = this.styles[Math.min(this.styles.length - 1, Math.max(0, t.index - 1))];\n    this.url = e.url, this.height = e.height, this.width = e.width, this.anchorText = e.anchorText || [0, 0], this.anchorIcon = e.anchorIcon || [this.height / 2, this.width / 2], this.textColor = e.textColor || \"black\", this.textSize = e.textSize || 11, this.textDecoration = e.textDecoration || \"none\", this.fontWeight = e.fontWeight || \"bold\", this.fontStyle = e.fontStyle || \"normal\", this.fontFamily = e.fontFamily || \"Arial,sans-serif\", this.backgroundPosition = e.backgroundPosition || \"0 0\";\n  }, e.setCenter = function (t) {\n    this.center = t;\n  }, e.createCss = function (t) {\n    var e = [];\n    return e.push(\"cursor: pointer;\"), e.push(\"position: absolute; top: \" + t.y + \"px; left: \" + t.x + \"px;\"), e.push(\"width: \" + this.width + \"px; height: \" + this.height + \"px;\"), e.join(\"\");\n  }, e.getPosFromLatLng = function (t) {\n    var e = this.getProjection().fromLatLngToDivPixel(t);\n    return e.x -= this.anchorIcon[1], e.y -= this.anchorIcon[0], e.x = e.x, e.y = e.y, e;\n  }, t;\n}(),\n    e = function () {\n  function e(e) {\n    this.markerClusterer = e, this.map = this.markerClusterer.getMap(), this.gridSize = this.markerClusterer.getGridSize(), this.minClusterSize = this.markerClusterer.getMinimumClusterSize(), this.averageCenter = this.markerClusterer.getAverageCenter(), this.markers = [], this.center = void 0, this.bounds = null, this.clusterIcon = new t(this, this.markerClusterer.getStyles());\n  }\n\n  var i = e.prototype;\n  return i.getSize = function () {\n    return this.markers.length;\n  }, i.getMarkers = function () {\n    return this.markers;\n  }, i.getCenter = function () {\n    return this.center;\n  }, i.getMap = function () {\n    return this.map;\n  }, i.getClusterer = function () {\n    return this.markerClusterer;\n  }, i.getBounds = function () {\n    for (var t = new google.maps.LatLngBounds(this.center, this.center), e = this.getMarkers(), i = 0; i < e.length; i++) {\n      var s = e[i].getPosition();\n      s && t.extend(s);\n    }\n\n    return t;\n  }, i.remove = function () {\n    this.clusterIcon.setMap(null), this.markers = [], delete this.markers;\n  }, i.addMarker = function (t) {\n    if (this.isMarkerAlreadyAdded(t)) return !1;\n\n    if (this.center) {\n      if (this.averageCenter) {\n        var e = t.getPosition();\n\n        if (e) {\n          var i = this.markers.length + 1;\n          this.center = new google.maps.LatLng((this.center.lat() * (i - 1) + e.lat()) / i, (this.center.lng() * (i - 1) + e.lng()) / i), this.calculateBounds();\n        }\n      }\n    } else {\n      var s = t.getPosition();\n      s && (this.center = s, this.calculateBounds());\n    }\n\n    t.isAdded = !0, this.markers.push(t);\n    var n = this.markers.length,\n        r = this.markerClusterer.getMaxZoom();\n    if (null !== r && this.map.getZoom() > r) t.getMap() !== this.map && t.setMap(this.map);else if (n < this.minClusterSize) t.getMap() !== this.map && t.setMap(this.map);else if (n === this.minClusterSize) for (var o = 0; o < n; o++) this.markers[o].setMap(null);else t.setMap(null);\n    return this.updateIcon(), !0;\n  }, i.isMarkerInClusterBounds = function (t) {\n    if (null !== this.bounds) {\n      var e = t.getPosition();\n      if (e) return this.bounds.contains(e);\n    }\n\n    return !1;\n  }, i.calculateBounds = function () {\n    this.bounds = this.markerClusterer.getExtendedBounds(new google.maps.LatLngBounds(this.center, this.center));\n  }, i.updateIcon = function () {\n    var t = this.markers.length,\n        e = this.markerClusterer.getMaxZoom();\n    null !== e && this.map.getZoom() > e ? this.clusterIcon.hide() : t < this.minClusterSize ? this.clusterIcon.hide() : (this.center && this.clusterIcon.setCenter(this.center), this.clusterIcon.useStyle(this.markerClusterer.getCalculator()(this.markers, this.markerClusterer.getStyles().length)), this.clusterIcon.show());\n  }, i.isMarkerAlreadyAdded = function (t) {\n    if (this.markers.indexOf) return this.markers.includes(t);\n\n    for (var e = 0; e < this.markers.length; e++) if (t === this.markers[e]) return !0;\n\n    return !1;\n  }, e;\n}(),\n    i = function (t, e) {\n  for (var i = 0, s = t.length.toString(), n = s; 0 !== n;) n = parseInt(n, 10) / 10, i++;\n\n  return {\n    text: s,\n    index: i = Math.min(i, e),\n    title: \"\"\n  };\n},\n    s = 2e3,\n    n = 500,\n    r = \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n    o = \"png\",\n    a = [53, 56, 66, 78, 90],\n    h = \"cluster\",\n    l = function () {\n  function t(e, l, u) {\n    void 0 === l && (l = []), void 0 === u && (u = {}), this.extend(t, google.maps.OverlayView), this.markers = [], this.clusters = [], this.listeners = [], this.activeMap = null, this.ready = !1, this.gridSize = u.gridSize || 60, this.minClusterSize = u.minimumClusterSize || 2, this.maxZoom = u.maxZoom || null, this.styles = u.styles || [], this.title = u.title || \"\", this.zoomOnClick = !0, void 0 !== u.zoomOnClick && (this.zoomOnClick = u.zoomOnClick), this.averageCenter = !1, void 0 !== u.averageCenter && (this.averageCenter = u.averageCenter), this.ignoreHidden = !1, void 0 !== u.ignoreHidden && (this.ignoreHidden = u.ignoreHidden), this.enableRetinaIcons = !1, void 0 !== u.enableRetinaIcons && (this.enableRetinaIcons = u.enableRetinaIcons), this.imagePath = u.imagePath || r, this.imageExtension = u.imageExtension || o, this.imageSizes = u.imageSizes || a, this.calculator = u.calculator || i, this.batchSize = u.batchSize || s, this.batchSizeIE = u.batchSizeIE || n, this.clusterClass = u.clusterClass || h, -1 !== navigator.userAgent.toLowerCase().indexOf(\"msie\") && (this.batchSize = this.batchSizeIE), this.timerRefStatic = null, this.setupStyles(), this.addMarkers(l, !0), this.setMap(e);\n  }\n\n  var l = t.prototype;\n  return l.onAdd = function () {\n    var t = this;\n    this.activeMap = this.getMap(), this.ready = !0, this.repaint(), this.listeners = [google.maps.event.addListener(this.getMap(), \"zoom_changed\", function () {\n      t.resetViewport(!1), t.getMap().getZoom() !== (t.get(\"minZoom\") || 0) && t.getMap().getZoom() !== t.get(\"maxZoom\") || google.maps.event.trigger(t, \"idle\");\n    }), google.maps.event.addListener(this.getMap(), \"idle\", function () {\n      t.redraw();\n    })];\n  }, l.onRemove = function () {\n    for (var t = 0; t < this.markers.length; t++) this.markers[t].getMap() !== this.activeMap && this.markers[t].setMap(this.activeMap);\n\n    for (var e = 0; e < this.clusters.length; e++) this.clusters[e].remove();\n\n    this.clusters = [];\n\n    for (var i = 0; i < this.listeners.length; i++) google.maps.event.removeListener(this.listeners[i]);\n\n    this.listeners = [], this.activeMap = null, this.ready = !1;\n  }, l.draw = function () {}, l.setupStyles = function () {\n    if (!(this.styles.length > 0)) for (var t = 0; t < this.imageSizes.length; t++) this.styles.push({\n      url: this.imagePath + (t + 1) + \".\" + this.imageExtension,\n      height: this.imageSizes[t],\n      width: this.imageSizes[t]\n    });\n  }, l.fitMapToMarkers = function () {\n    for (var t = this.getMarkers(), e = new google.maps.LatLngBounds(), i = 0; i < t.length; i++) {\n      var s = t[i].getPosition();\n      s && e.extend(s);\n    }\n\n    this.getMap().fitBounds(e);\n  }, l.getGridSize = function () {\n    return this.gridSize;\n  }, l.setGridSize = function (t) {\n    this.gridSize = t;\n  }, l.getMinimumClusterSize = function () {\n    return this.minClusterSize;\n  }, l.setMinimumClusterSize = function (t) {\n    this.minClusterSize = t;\n  }, l.getMaxZoom = function () {\n    return this.maxZoom;\n  }, l.setMaxZoom = function (t) {\n    this.maxZoom = t;\n  }, l.getStyles = function () {\n    return this.styles;\n  }, l.setStyles = function (t) {\n    this.styles = t;\n  }, l.getTitle = function () {\n    return this.title;\n  }, l.setTitle = function (t) {\n    this.title = t;\n  }, l.getZoomOnClick = function () {\n    return this.zoomOnClick;\n  }, l.setZoomOnClick = function (t) {\n    this.zoomOnClick = t;\n  }, l.getAverageCenter = function () {\n    return this.averageCenter;\n  }, l.setAverageCenter = function (t) {\n    this.averageCenter = t;\n  }, l.getIgnoreHidden = function () {\n    return this.ignoreHidden;\n  }, l.setIgnoreHidden = function (t) {\n    this.ignoreHidden = t;\n  }, l.getEnableRetinaIcons = function () {\n    return this.enableRetinaIcons;\n  }, l.setEnableRetinaIcons = function (t) {\n    this.enableRetinaIcons = t;\n  }, l.getImageExtension = function () {\n    return this.imageExtension;\n  }, l.setImageExtension = function (t) {\n    this.imageExtension = t;\n  }, l.getImagePath = function () {\n    return this.imagePath;\n  }, l.setImagePath = function (t) {\n    this.imagePath = t;\n  }, l.getImageSizes = function () {\n    return this.imageSizes;\n  }, l.setImageSizes = function (t) {\n    this.imageSizes = t;\n  }, l.getCalculator = function () {\n    return this.calculator;\n  }, l.setCalculator = function (t) {\n    this.calculator = t;\n  }, l.getBatchSizeIE = function () {\n    return this.batchSizeIE;\n  }, l.setBatchSizeIE = function (t) {\n    this.batchSizeIE = t;\n  }, l.getClusterClass = function () {\n    return this.clusterClass;\n  }, l.setClusterClass = function (t) {\n    this.clusterClass = t;\n  }, l.getMarkers = function () {\n    return this.markers;\n  }, l.getTotalMarkers = function () {\n    return this.markers.length;\n  }, l.getClusters = function () {\n    return this.clusters;\n  }, l.getTotalClusters = function () {\n    return this.clusters.length;\n  }, l.addMarker = function (t, e) {\n    this.pushMarkerTo(t), e || this.redraw();\n  }, l.addMarkers = function (t, e) {\n    for (var i in t) t.hasOwnProperty(i) && this.pushMarkerTo(t[i]);\n\n    e || this.redraw();\n  }, l.pushMarkerTo = function (t) {\n    var e = this;\n    t.getDraggable() && google.maps.event.addListener(t, \"dragend\", function () {\n      e.ready && (t.isAdded = !1, e.repaint());\n    }), t.isAdded = !1, this.markers.push(t);\n  }, l.removeMarker_ = function (t) {\n    var e = -1;\n    if (this.markers.indexOf) e = this.markers.indexOf(t);else for (var i = 0; i < this.markers.length; i++) if (t === this.markers[i]) {\n      e = i;\n      break;\n    }\n    return -1 !== e && (t.setMap(null), this.markers.splice(e, 1), !0);\n  }, l.removeMarker = function (t, e) {\n    var i = this.removeMarker_(t);\n    return !e && i && this.repaint(), i;\n  }, l.removeMarkers = function (t, e) {\n    for (var i = !1, s = 0; s < t.length; s++) i = i || this.removeMarker_(t[s]);\n\n    return !e && i && this.repaint(), i;\n  }, l.clearMarkers = function () {\n    this.resetViewport(!0), this.markers = [];\n  }, l.repaint = function () {\n    var t = this.clusters.slice();\n    this.clusters = [], this.resetViewport(!1), this.redraw(), setTimeout(function () {\n      for (var e = 0; e < t.length; e++) t[e].remove();\n    }, 0);\n  }, l.getExtendedBounds = function (t) {\n    var e = this.getProjection(),\n        i = e.fromLatLngToDivPixel(new google.maps.LatLng(t.getNorthEast().lat(), t.getNorthEast().lng()));\n    i.x += this.gridSize, i.y -= this.gridSize;\n    var s = e.fromLatLngToDivPixel(new google.maps.LatLng(t.getSouthWest().lat(), t.getSouthWest().lng()));\n    return s.x -= this.gridSize, s.y += this.gridSize, t.extend(e.fromDivPixelToLatLng(i)), t.extend(e.fromDivPixelToLatLng(s)), t;\n  }, l.redraw = function () {\n    this.createClusters(0);\n  }, l.resetViewport = function (t) {\n    for (var e = 0; e < this.clusters.length; e++) this.clusters[e].remove();\n\n    this.clusters = [];\n\n    for (var i = 0; i < this.markers.length; i++) {\n      var s = this.markers[i];\n      s.isAdded = !1, t && s.setMap(null);\n    }\n  }, l.distanceBetweenPoints = function (t, e) {\n    var i = (e.lat() - t.lat()) * Math.PI / 180,\n        s = (e.lng() - t.lng()) * Math.PI / 180,\n        n = Math.sin(i / 2) * Math.sin(i / 2) + Math.cos(t.lat() * Math.PI / 180) * Math.cos(e.lat() * Math.PI / 180) * Math.sin(s / 2) * Math.sin(s / 2);\n    return 2 * Math.atan2(Math.sqrt(n), Math.sqrt(1 - n)) * 6371;\n  }, l.isMarkerInBounds = function (t, e) {\n    var i = t.getPosition();\n    return !!i && e.contains(i);\n  }, l.addToClosestCluster = function (t) {\n    for (var i, s = 4e4, n = null, r = 0; r < this.clusters.length; r++) {\n      var o = (i = this.clusters[r]).getCenter(),\n          a = t.getPosition();\n\n      if (o && a) {\n        var h = this.distanceBetweenPoints(o, a);\n        h < s && (s = h, n = i);\n      }\n    }\n\n    n && n.isMarkerInClusterBounds(t) ? n.addMarker(t) : ((i = new e(this)).addMarker(t), this.clusters.push(i));\n  }, l.createClusters = function (t) {\n    var e = this;\n\n    if (this.ready) {\n      0 === t && (google.maps.event.trigger(this, \"clusteringbegin\", this), null !== this.timerRefStatic && (window.clearTimeout(this.timerRefStatic), delete this.timerRefStatic));\n\n      for (var i = this.getMap().getZoom() > 3 ? new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(), this.getMap().getBounds().getNorthEast()) : new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625)), s = this.getExtendedBounds(i), n = Math.min(t + this.batchSize, this.markers.length), r = t; r < n; r++) {\n        var o = this.markers[r];\n        !o.isAdded && this.isMarkerInBounds(o, s) && (!this.ignoreHidden || this.ignoreHidden && o.getVisible()) && this.addToClosestCluster(o);\n      }\n\n      n < this.markers.length ? this.timerRefStatic = window.setTimeout(function () {\n        e.createClusters(n);\n      }, 0) : (this.timerRefStatic = null, google.maps.event.trigger(this, \"clusteringend\", this));\n    }\n  }, l.extend = function (t, e) {\n    return function (t) {\n      for (var e in t.prototype) this.prototype[e] = t.prototype[e];\n\n      return this;\n    }.apply(t, [e]);\n  }, t;\n}();\n\nexport { e as Cluster, t as ClusterIcon, l as Clusterer };","map":null,"metadata":{},"sourceType":"module"}
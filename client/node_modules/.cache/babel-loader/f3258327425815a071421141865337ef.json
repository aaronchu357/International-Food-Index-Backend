{"ast":null,"code":"var _jsxFileName = \"/Users/aaronchu/Flatiron/projects/mod-5-final/international-food-index-backend/client/src/containers/CommentsContainer.js\";\nimport React, { Component } from 'react';\nimport NewCommentForm from '../forms/NewCommentForm';\nimport Comment from '../components/Comment';\nimport { NavLink } from 'react-router-dom';\nexport default class CommentsContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      comments: [],\n      alreadyCommented: false\n    };\n\n    this.handleCommentFormSubmit = commentInfo => {\n      fetch('/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: parseInt(this.props.userInfo.id),\n          national_dish_id: parseInt(this.props.nationalDishSelected.id),\n          content: commentInfo.content,\n          rating: parseInt(commentInfo.rating)\n        })\n      }).then(resp => resp.json()).then(commentInfo => {\n        this.setState(prevState => {\n          return {\n            comments: [...prevState.comments, commentInfo.data],\n            alreadyCommented: true\n          };\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log('comment container mount');\n    fetch(\"/national_dishes/\".concat(this.props.nationalDishSelected.id)).then(resp => resp.json()).then(nationalDish => {\n      let allComments = [];\n      nationalDish.data.attributes.comments.map(comment => allComments.push(comment));\n\n      if (localStorage.token) {\n        !!allComments.find(comment => comment.user_id === this.props.userInfo.id) ? this.setState({\n          comments: allComments,\n          alreadyCommented: true\n        }) : this.setState({\n          comments: allComments\n        });\n      } else {\n        this.setState({\n          comments: allComments,\n          alreadyCommented: true\n        });\n      }\n    });\n  }\n\n  render() {\n    const generateComments = this.state.comments.map(comment => React.createElement(Comment, {\n      commentId: comment.id,\n      userInfo: this.props.userInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, generateComments, this.state.alreadyCommented ? null : React.createElement(NewCommentForm, {\n      handleCommentFormSubmit: this.handleCommentFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), localStorage.token ? null : React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Login\"), \" or \", React.createElement(NavLink, {\n      to: \"/signup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Signup\"), \" to comment on this dish.\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/aaronchu/Flatiron/projects/mod-5-final/international-food-index-backend/client/src/containers/CommentsContainer.js"],"names":["React","Component","NewCommentForm","Comment","NavLink","CommentsContainer","state","comments","alreadyCommented","handleCommentFormSubmit","commentInfo","fetch","method","headers","body","JSON","stringify","user_id","parseInt","props","userInfo","id","national_dish_id","nationalDishSelected","content","rating","then","resp","json","setState","prevState","data","componentDidMount","console","log","nationalDish","allComments","attributes","map","comment","push","localStorage","token","find","render","generateComments"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport NewCommentForm from '../forms/NewCommentForm'\nimport Comment from '../components/Comment'\nimport { NavLink } from 'react-router-dom'\n\nexport default class CommentsContainer extends Component {\n\n  state = {\n    comments: [],\n    alreadyCommented: false\n  }\n\n  componentDidMount() {\n    console.log('comment container mount')\n    fetch(`/national_dishes/${this.props.nationalDishSelected.id}`)\n      .then(resp => resp.json())\n      .then(nationalDish => {\n        let allComments = []\n        nationalDish.data.attributes.comments.map(comment => allComments.push(comment))\n        if (localStorage.token) {\n          !!allComments.find(comment => comment.user_id === this.props.userInfo.id) ? this.setState({ comments: allComments, alreadyCommented: true }) : this.setState({ comments: allComments })\n        } else {\n          this.setState({ comments: allComments, alreadyCommented: true })\n        }\n      })\n  }\n\n  handleCommentFormSubmit = (commentInfo) => {\n    fetch('/comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id: parseInt(this.props.userInfo.id),\n        national_dish_id: parseInt(this.props.nationalDishSelected.id),\n        content: commentInfo.content,\n        rating: parseInt(commentInfo.rating)\n      })\n    })\n      .then(resp => resp.json())\n      .then(commentInfo => {\n        this.setState(prevState => {\n          return { comments: [...prevState.comments, commentInfo.data], alreadyCommented: true }\n        })\n      })\n  }\n\n  render() {\n    const generateComments = this.state.comments.map(comment => <Comment commentId={comment.id} userInfo={this.props.userInfo} />)\n    return (\n      <div>\n        {generateComments}\n        {this.state.alreadyCommented ? null : <NewCommentForm handleCommentFormSubmit={this.handleCommentFormSubmit} />}\n        {localStorage.token ? null : <h4><NavLink to='/login'>Login</NavLink> or <NavLink to='/signup'>Signup</NavLink> to comment on this dish.</h4>}\n      </div >\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}
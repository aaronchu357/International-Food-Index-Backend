{"ast":null,"code":"import _slicedToArray from \"/Users/aaronchu/Flatiron/projects/mod-5-final/international-food-index-backend/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aaronchu/Flatiron/projects/mod-5-final/international-food-index-backend/client/src/components/MapMarker.js\";\nimport React, { Fragment, useState } from 'react';\nimport { Marker } from '@react-google-maps/api';\n\nconst MapMarker = props => {\n  // useEffect(() => {\n  //   let dishesList = props.location.relationships.national_dishes.data.map(dish => dish.id)\n  //   return setNationalDishesIds([...dishesList])\n  // },[])\n  // return (\n  //   <div>\n  //     <Marker id={props.location.attributes.name}\n  //       onLoad={marker => {\n  //         console.log(props.location.attributes.name)\n  //       }}\n  //       position={{\n  //         lat: parseFloat(props.location.attributes.latitude),\n  //         lng: parseFloat(props.location.attributes.longitude)\n  //       }}\n  //       onClick={changeIsShown}\n  //     />\n  //     {isShown &&\n  //       <InfoWindow\n  //         position={{ lat: parseFloat(props.location.attributes.latitude), lng: parseFloat(props.location.attributes.longitude) }}\n  //       >\n  //         <div style={{\n  //           background: `white`,\n  //           border: `1px solid #ccc`,\n  //           padding: 15\n  //         }}>\n  //           <h1>{props.location.attributes.name}</h1>\n  //         </div>\n  //       </InfoWindow>\n  //     }\n  //   </div>\n  // )\n  // withStateHandlers(() => ({\n  //   isOpen: false,\n  //   infoIndex: null\n  // }), {\n  //   showInfo: ({ isOpen, infoIndex }) => (index) => ({\n  //     isOpen: infoIndex !== index || !isOpen,\n  //     infoIndex: index\n  //   })\n  // })\n  // <Marker onClick={() => props.showInfo(marker.index)}>\n  //   {(props.isOpen && props.infoIndex === marker.index) &&\n  //     <InfoWindow onCloseClick={props.showInfo}>\n  //       <span>{marker.info}</span>\n  //     </InfoWindow>}\n  // </Marker>\n  // const [isOpen, setOpenCondition] = useState(false)\n  const _useState = useState(Math.floor(Math.random() * 16777215).toString(16)),\n        _useState2 = _slicedToArray(_useState, 2),\n        markerHex = _useState2[0],\n        setMarkerHex = _useState2[1];\n\n  const handleMarkerOnClick = () => {\n    props.handleMarkerOnClick(props.location); // setOpenCondition(!isOpen)\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Marker, {\n    id: props.location.id,\n    onLoad: marker => {\n      console.log(props.location.attributes.name);\n      console.log(marker);\n    },\n    icon: markerHex.length === 6 ? \"https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=\\u2022|\".concat(markerHex) : \"https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=\\u2022|FFFFFF\",\n    position: {\n      lat: parseFloat(props.location.attributes.latitude),\n      lng: parseFloat(props.location.attributes.longitude)\n    },\n    onClick: handleMarkerOnClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default MapMarker;","map":{"version":3,"sources":["/Users/aaronchu/Flatiron/projects/mod-5-final/international-food-index-backend/client/src/components/MapMarker.js"],"names":["React","Fragment","useState","Marker","MapMarker","props","Math","floor","random","toString","markerHex","setMarkerHex","handleMarkerOnClick","location","id","marker","console","log","attributes","name","length","lat","parseFloat","latitude","lng","longitude"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,MAAT,QAAuB,wBAAvB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAlDyB,oBAoDSH,QAAQ,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,QAAzB,EAAmCC,QAAnC,CAA4C,EAA5C,CAAD,CApDjB;AAAA;AAAA,QAoDlBC,SApDkB;AAAA,QAoDPC,YApDO;;AAsDzB,QAAMC,mBAAmB,GAAG,MAAM;AAChCP,IAAAA,KAAK,CAACO,mBAAN,CAA0BP,KAAK,CAACQ,QAAhC,EADgC,CAEhC;AACD,GAHD;;AAKA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAER,KAAK,CAACQ,QAAN,CAAeC,EAA3B;AACA,IAAA,MAAM,EAAEC,MAAM,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACQ,QAAN,CAAeK,UAAf,CAA0BC,IAAtC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,KAJD;AAKA,IAAA,IAAI,EAAEL,SAAS,CAACU,MAAV,KAAqB,CAArB,kFAA4FV,SAA5F,iFALN;AAMA,IAAA,QAAQ,EAAE;AACRW,MAAAA,GAAG,EAAEC,UAAU,CAACjB,KAAK,CAACQ,QAAN,CAAeK,UAAf,CAA0BK,QAA3B,CADP;AAERC,MAAAA,GAAG,EAAEF,UAAU,CAACjB,KAAK,CAACQ,QAAN,CAAeK,UAAf,CAA0BO,SAA3B;AAFP,KANV;AAUA,IAAA,OAAO,EAAEb,mBAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADF;AAiBD,CA5ED;;AA8EA,eAAeR,SAAf","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport { Marker } from '@react-google-maps/api'\n\nconst MapMarker = props => {\n  // useEffect(() => {\n  //   let dishesList = props.location.relationships.national_dishes.data.map(dish => dish.id)\n  //   return setNationalDishesIds([...dishesList])\n  // },[])\n\n  // return (\n  //   <div>\n  //     <Marker id={props.location.attributes.name}\n  //       onLoad={marker => {\n  //         console.log(props.location.attributes.name)\n  //       }}\n  //       position={{\n  //         lat: parseFloat(props.location.attributes.latitude),\n  //         lng: parseFloat(props.location.attributes.longitude)\n  //       }}\n  //       onClick={changeIsShown}\n  //     />\n  //     {isShown &&\n  //       <InfoWindow\n  //         position={{ lat: parseFloat(props.location.attributes.latitude), lng: parseFloat(props.location.attributes.longitude) }}\n  //       >\n  //         <div style={{\n  //           background: `white`,\n  //           border: `1px solid #ccc`,\n  //           padding: 15\n  //         }}>\n  //           <h1>{props.location.attributes.name}</h1>\n  //         </div>\n  //       </InfoWindow>\n  //     }\n  //   </div>\n  // )\n\n  // withStateHandlers(() => ({\n  //   isOpen: false,\n  //   infoIndex: null\n  // }), {\n  //   showInfo: ({ isOpen, infoIndex }) => (index) => ({\n  //     isOpen: infoIndex !== index || !isOpen,\n  //     infoIndex: index\n  //   })\n  // })\n  // <Marker onClick={() => props.showInfo(marker.index)}>\n  //   {(props.isOpen && props.infoIndex === marker.index) &&\n  //     <InfoWindow onCloseClick={props.showInfo}>\n  //       <span>{marker.info}</span>\n  //     </InfoWindow>}\n  // </Marker>\n\n  // const [isOpen, setOpenCondition] = useState(false)\n\n  const [markerHex, setMarkerHex] = useState(Math.floor(Math.random()*16777215).toString(16))\n\n  const handleMarkerOnClick = () => {\n    props.handleMarkerOnClick(props.location)\n    // setOpenCondition(!isOpen)\n  }\n\n  return (\n    <Fragment>\n        <Marker id={props.location.id}\n        onLoad={marker => {\n          console.log(props.location.attributes.name)\n          console.log(marker)\n        }}\n        icon={markerHex.length === 6 ? `https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=•|${markerHex}` : `https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=•|FFFFFF` }\n        position={{\n          lat: parseFloat(props.location.attributes.latitude),\n          lng: parseFloat(props.location.attributes.longitude)\n        }}\n        onClick={handleMarkerOnClick}\n        />\n        \n    </Fragment>\n  )\n}\n\nexport default MapMarker"]},"metadata":{},"sourceType":"module"}